<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="storeCloseDAO">
	<!-- 매장 영업 준비금 조회 -->
	<select id="getWarehousing" resultType="viewwarehousing">
		SELECT SUM(W.WARE_QTY) "wareQty"
          	 , SUM(W.WARE_PRICE) "warePrice"
         	 , W.S_ID "sId"
          	 , UPPER(W.ST_PAY_METHOD) "stPayMethod"
         	 , S.ST_NAME "stName"
		FROM WAREHOUSING W, STOCK S , STOREOPEN SOP
		WHERE W.ST_NUM = S.ST_NUM 
		   AND 
		   W.S_ID = SOP.S_ID
           AND 
           W.S_ID = #{sId}
           AND 
           W.WARE_DATE BETWEEN (SELECT MAX(OPENTIME) FROM STOREOPEN WHERE S_ID = #{sId}) AND NVL(SOP.CLOSETIME,SYSTIMESTAMP)
           AND 
           W.WARE_QTY > 0 
           AND 
           W.WARE_PRICE > 0
		GROUP BY W.S_ID, W.ST_PAY_METHOD ,S.ST_NAME
		ORDER BY S.ST_NAME
	</select>
	
	<!-- 매장 마감 시재 정산 조회 -->
	<select id="getChasAdvance" resultType="order">
		SELECT DISTINCT  O.S_ID
				, TOTAL
				, RECEIPT
				, PAY_METHOD
				, MILEAGE
				, TO_CHAR(O_DATE,'YYYY-MM-DD')
		FROM 
			ORDERS O JOIN STOREOPEN SOP
            ON O.S_ID = SOP.S_ID
		WHERE 
			O_DATE BETWEEN (SELECT MAX(OPENTIME) FROM STOREOPEN WHERE S_ID = #{sId}) AND NVL(SOP.CLOSETIME,SYSTIMESTAMP)
			AND 
			O.S_ID = #{sId}
			AND 
			UPPER(PAY_METHOD) = 'CASH'
            AND
            O.DELIVERY_STATUS IN ('C3', 'C5')
            AND
            TOTAL > 0
	</select>
	
	<!-- 매장 기본 준비금, 오픈시간, 마감시간 조회 -->
	<select id="getStoreOpen" resultType="storeOpen">
		SELECT S_ID
			 , DEFAULT_CASH
			 , OPENTIME
			 , CLOSETIME
		FROM STOREOPEN
		WHERE S_ID = #{sId}
		AND OPENTIME IN (SELECT MAX(OPENTIME) 
						 FROM STOREOPEN)
	</select>
	
	<!-- 매장 재고 수량 조회 -->
	<select id="getStockTruthList" resultType="stock">
		SELECT ST_NUM
			 , S_ID
			 , ST_NAME
			 , ST_QTY
			 , ST_AQTY
			 , CA_NUM
			 , ST_STATUS
			 , LACK_QTY
		FROM STOCK
		WHERE S_ID = #{sId}
	</select>
	
	<!-- 마감 영수증을 위한 결제내역(현금/카드) 조회 -->
	<select id="getCloseReceiptCash" resultType="order">
		SELECT O.RECEIPT "receipt"
			 , O.PAY_METHOD "payMethod"
			 , NVL(SUM(O.TOTAL),0) "total"
			 , NVL(COUNT(*),0)  "cnt"
		FROM ORDERS O JOIN STOREOPEN SOP
		ON O.S_ID = SOP.S_ID
		AND TO_CHAR(OPENTIME,'YYYY-MM-DD') = TO_CHAR(SYSDATE,'YYYY-MM-DD')
		WHERE O.O_DATE BETWEEN (SELECT MAX(OPENTIME) FROM STOREOPEN WHERE S_ID = #{sId}) AND NVL(SOP.CLOSETIME,SYSTIMESTAMP)
		        AND ( (O.RECEIPT='delivery' AND O.DELIVERY_STATUS IN ('C3', 'C5')) OR ( O.RECEIPT = 'takeout' AND O.DELIVERY_STATUS IN ('C3', 'C5') ) )
		AND O.S_ID = #{sId}
		AND O.TOTAL > 0
		GROUP BY O.RECEIPT, O.PAY_METHOD  
	</select>
	
	<!-- 마감 영수증을 위한 결제내역(마일리지 및 총금액) 조회 -->
	<select id="getCloseReceiptMileage" resultType="order">
		SELECT NVL(SUM(O.MILEAGE),0) "mileage"
			 , NVL(SUM(O.TOTAL)*0.01,0) "addmileage"
			 , NVL(SUM(O.TOTAL),0) "total"
			 , NVL(COUNT(*),0) "addMileageCnt"
       		 , NVL(COUNT(CASE WHEN MILEAGE > 0 THEN 1 ELSE NULL END),0) "minusMileageCnt"
		FROM ORDERS O ,(SELECT CLOSETIME, OPENTIME
						FROM STOREOPEN
						WHERE S_ID = #{sId}
						AND TRUNC(OPENTIME) = #{openTime}) SOP
		WHERE
    	( O.O_DATE BETWEEN (SELECT MAX(OPENTIME) FROM STOREOPEN WHERE S_ID = #{sId}) AND NVL(SOP.CLOSETIME,SYSTIMESTAMP))
	   	AND ( (O.RECEIPT='delivery' AND O.DELIVERY_STATUS IN ('C3', 'C5')) OR ( O.RECEIPT = 'takeout' AND O.DELIVERY_STATUS IN ('C3', 'C5') ) )
		AND O.S_ID = #{sId}
		AND O.TOTAL > 0
	</select>
	
	<!-- 마감 영수증을 위한 환불내역(결제방식 별 금액, 마일리지, 건수) 조회 -->
	<select id="getRefundInfo" resultType="order">
		SELECT NVL(SUM(TOTAL),0) "refundSum"
			 , NVL(SUM(TOTAL)*0.01,0) "refundMileage"
			 , PAY_METHOD "refundMethod"
			 , NVL(COUNT(CASE WHEN MILEAGE <![CDATA[ < ]]> 0 THEN 1 ELSE NULL END),0) "mileage"
			 , NVL(COUNT(CASE WHEN PAY_METHOD = 'cash' THEN 1 ELSE NULL END),0) "cashRefundCnt"
			 , NVL(COUNT(CASE WHEN PAY_METHOD = 'card' THEN 1 ELSE NULL END),0) "cardRefundCnt"
		FROM ORDERS O JOIN STOREOPEN SOP
	    ON O.S_ID = SOP.S_ID 
	    AND TO_CHAR(OPENTIME,'YYYY-MM-DD') = TO_CHAR(SYSDATE,'YYYY-MM-DD')
	    WHERE O.O_DATE BETWEEN (SELECT MAX(OPENTIME) FROM STOREOPEN WHERE S_ID = #{sId}) AND NVL(SOP.CLOSETIME,SYSTIMESTAMP)
		AND O.TOTAL <![CDATA[ < ]]> 0
		AND O.S_ID = #{sId}
		GROUP BY PAY_METHOD
	</select>
	
	<!-- *********************************** insert or update *********************************** -->
	  
	<!-- 재고입고 테이블에 추가 재고 입고 내역 insert -->
	<insert id="warehousingInsertAddStock">
		INSERT INTO WAREHOUSING (
  									WARE_NUM
  									, WARE_DATE
  									, WARE_QTY
  									, WARE_PRICE
  									, ST_NUM
  									, S_ID
  									, ST_PAY_METHOD
  									, ST_LOSS
		)
		SELECT 'WH'||LPAD(WARE_SEQ.NEXTVAL,4,0), A.* FROM(
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			SELECT 
					  SYSDATE
					  ,#{item.wareQty} AS WARE_QTY
					  ,#{item.warePrice} AS WARE_PRICE
					  ,#{item.stName} AS ST_NUM
					  ,#{item.sId} AS S_ID
					  ,#{item.stPayMethod} AS ST_PAY_METHOD
					  ,0 AS ST_LOSS
			FROM DUAL
		</foreach>) A
	</insert>
	
	<!-- 재고입고 테이블에 손실된 재고량 insert -->
	<insert id="warehousingInsertLoss">
		INSERT INTO WAREHOUSING (
  									WARE_NUM
  									, WARE_DATE
  									, WARE_QTY
  									, WARE_PRICE
  									, ST_NUM
  									, S_ID
  									, ST_LOSS
		)
		SELECT 'WH'||LPAD(WARE_SEQ.NEXTVAL,4,0), A.* FROM(
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			SELECT 
					  SYSDATE
					  ,0 AS WARE_QTY
					  ,0 AS WARE_PRICE
					  ,#{item.stNum} AS ST_NUM
					  ,#{item.sId} AS S_ID
					  ,#{item.stLoss} AS ST_LOSS
			FROM DUAL
		</foreach>) A
	</insert>
	
	<!-- 재고 테이블에 수량 update -->
	<update id="stockUpdate">
		<foreach  item="item" collection="list"  index="index" separator=";" open="DECLARE BEGIN" close="; END;" >
			UPDATE STOCK SET 
				  	  ST_QTY = #{item.truthQty}
				  	 ,ST_STATUS = #{item.stStatus} 
					
			WHERE ST_NUM = #{item.stNum}
		</foreach>
	</update>
	
	<!-- 재고 테이블에 수량 update -->
	<update id="storeUpdate">
		<foreach  item="item" collection="list"  index="index" separator=";" open="DECLARE BEGIN" close="; END;" >
			UPDATE STOREOPEN
			SET 
				CLOSETIME = SYSTIMESTAMP,
				CASH = #{item.cash},
				OR_CASH = #{item.orCash},
				DIFFERENCE = #{item.difference},
				NET_INCOME = #{item.netIncome}
			WHERE 
				TO_CHAR(OPENTIME,'YYYY-MM-DD HH24MI') = #{item.openTime}
		</foreach>
	</update>
	
	<!-- pdf 파일  -->
	<select id="storeReceipt" resultType="map">
		SELECT S_ID
			 , OPENTIME
			 , CLOSETIME
		FROM STOREOPEN
		WHERE S_ID = #{sId}
		AND OPENTIME IN (SELECT MAX(OPENTIME) 
						 FROM STOREOPEN)
	</select>
	
	<!-- pdf 파일 목록 -->
	<select id="storeReceiptList" resultType="storeOpen">
		SELECT B.* FROM ( SELECT A.*, ROWNUM RN FROM (
			SELECT OPENTIME	"openTime"
				 , CLOSETIME "closeTime"
			FROM STOREOPEN 
			WHERE S_ID = #{sId}
					AND CLOSETIME IS NOT NULL
				<if test="startDate != null and endDate != null ">
					AND TO_CHAR(OPENTIME,'YYYY-MM-DD') BETWEEN '${startDate}' AND '${endDate}'
				</if>
			ORDER BY OPENTIME DESC
		<![CDATA[ 
		      ) A )B WHERE RN >= #{start} and RN <= #{end}   
		]]>
	</select>
	
	<!-- pdf 파일 목록 페이징 처리를 위한 쿼리문-->
	<select id="storeReceiptListPaging" resultType="int"> 
		SELECT COUNT(*)
		FROM STOREOPEN 
		WHERE S_ID = #{sId}
				AND CLOSETIME IS NOT NULL
			<if test="startDate != null and endDate != null ">
				AND TO_CHAR(OPENTIME,'YYYY-MM-DD') BETWEEN '${startDate}' AND '${endDate}'
			</if>
		ORDER BY OPENTIME DESC
	</select>
	
	
</mapper>